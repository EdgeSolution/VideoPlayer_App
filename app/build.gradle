apply plugin: 'com.android.application'

ext {
    isRelease = checkRelease()
}

def checkRelease() {
    def runTasks = gradle.startParameter.taskNames
    for (String task : runTasks) {
        if (task.contains("assemble") && !task.contains("Debug")) {
            return true
        }
    }
    return false
}

def increasedVersionCode() {
    def propFile = file('../gradle.properties')
    Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    def code = props['VERSION_CODE'].toInteger()
    if (isRelease) {
        code++
        props['VERSION_CODE'] = code.toString()
        props.store(propFile.newWriter(), null)
    }
    return code
}

static def lastGitCommit() {
    try{
        return 'git log --pretty=format:%h -1'.execute().text.trim()
    }catch (ignored){
        return "0000000"
    }
}

def changeVersionName() {
    def propFile = file('../gradle.properties')
    Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    def code = props['VERSION_CODE'].toInteger()
    if (isRelease) {
        //def mainVersion = (int)(code/100)
        //def minorVersion = (int)(code%100)
        //return mainVersion+"."+minorVersion+"."+gitCommitLog
        def gitCommitLog= lastGitCommit()
        return code+"."+gitCommitLog
    }
    return ""
}


android {


    compileSdkVersion 27

    signingConfigs {
        config {
            keyAlias 'adv'
            keyPassword 'advantech'
            storeFile file('../advantech.jks')
            storePassword 'advantech'
        }
    }

    defaultConfig {
        applicationId "com.adv.videoplayer"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode increasedVersionCode()
        versionName changeVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    applicationVariants.all { variant ->
        if ("release" == variant.buildType.name) {
            variant.outputs.all {
                outputFileName = "VideoPlayer_v${defaultConfig.versionName}.apk"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }

    lintOptions {
        abortOnError false
    }

    productFlavors {
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation(rootProject.ext.dependencies.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation project(':videoplayerlib')
    implementation 'com.alibaba:fastjson:1.1.54.android'
    implementation rootProject.ext.dependencies.appcompatV7
    implementation rootProject.ext.dependencies.rxpermissions
    implementation rootProject.ext.dependencies.rxjava
    testImplementation rootProject.ext.dependencies.junit
    implementation rootProject.ext.dependencies.recyclerview
    implementation rootProject.ext.dependencies.glide
    implementation 'com.github.hedzr:android-file-chooser:v1.1.14'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
}
